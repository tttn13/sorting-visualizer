{"version":3,"sources":["components/BarChart.js","algorithms/_helpers.js","algorithms/quickSort.js","algorithms/bubbleSort.js","algorithms/selectionSort.js","algorithms/insertionSort.js","algorithms/mergeSort.js","algorithms/heapSort.js","components/AlgoExplained.js","components/utils/utils.js","redux/chartSlice.js","redux/selectors.js","components/SortingVisualizer.js","components/Footer.js","components/AlgoMenu.js","components/SpeedMenu.js","components/NumOfBarsMenu.js","components/WorstCaseCheckBox.js","components/RandomizeBtn.js","redux/index.js","redux/store.js","components/utils/animations.js","components/PlayBtn.js","components/PauseBtn.js","components/NavBar.js","App.js","index.js"],"names":["BarChart","barsList","showBarHeight","thisIndex","length","filter","bar","index","height","className","map","barType","type","style","value","swap","items","leftIndex","rightIndex","temp","divider","movingBars","barsIDsArr","start","end","pivot","partition","barsArr","prevIdx","push","QuickSortDesc","title","href","target","rel","description","worstCase","avgCase","bestCase","space","BubbleSortDesc","SelectionSortDesc","InsertionSortDesc","divide","mid","Math","floor","merge","sortedArr","i","j","indexes","MergeSortDesc","heapify","largest","left","right","HeapSortDesc","AlgoExplained","algoDesc","algoName","generateBarChart","numOfBars","newBars","id","Date","now","toString","random","parseInt","pause","speed","a","Promise","resolve","setTimeout","generateMovingBars","algoID","algoOptions","getAlgoName","num","nextNum","firstBar","secondBar","bubbleSort","arr","minIdx","selectionSort","insertionSort","mergeSort","quickSort","ceil","heapSort","find","algo","chartSlice","createSlice","name","initialState","isPaused","finished","menuChanged","currentAlgo","numOfBarsOptions","speedOptions","barTypes","NORMAL","CURRENT","SORTED","reducers","createList","state","action","payload","saveMovingBars","clearMovingBars","changePaused","changeMenu","changeFinished","changeAlgo","changeWorstCase","changeNumOfBars","changeSpeed","swappingBars","barsInCheck","newbars","JSON","parse","stringify","changeBarColor","barIndexesToChange","barColor","changeAllBarsColors","changeBarHeight","barsRange","actions","swappingBarsAsync","dispatch","getState","chart","changeBarColorAsync","changeAllBarColorAsync","changeBarHeightAsync","resetChartAsync","document","getElementById","checked","reverseChartAsync","sort","b","selectBarsList","selectMovingBars","selectCurrentAlgo","selectAlgoOptions","selectPaused","selectSpeedOptions","selectCurrentSpeed","selectNumOfBars","selectNumOfBarsOptions","selectFinish","SortingVisualizer","useDispatch","useSelector","useEffect","Footer","role","icon","faGithub","faUser","faLinkedin","getFullYear","color","fontWeight","AlgoMenu","useState","buttonText","setButtonText","tabIndex","idx","onClick","e","SpeedMenu","item","NumOfBarsMenu","WorstCaseCheckBox","htmlFor","onChange","handleCheckBox","RandomizeBtn","rootReducer","combineReducers","chartSliceReducer","store","configureStore","reducer","swappingMovingBars","newMovingBars","currentStop","stopMoving","getBarColor","barsAndStateInCheck","console","log","shift","finishSorting","animateBarsInRange","prevRange","currRange","barsToChange","startSorting","currentMovingBars","barHeights","barColors","PlayBtn","slice","faPlay","size","PauseBtn","isFinished","faPause","NavBar","numOptions","preventDefault","window","scrollTo","faChartBar","padding","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.4fe36cec.chunk.js","sourcesContent":["import React from \"react\";\n\nconst BarChart = ({ barsList }) => {\n  const getBarColor = (barType) => {\n    if (barType === 0) return \"bar\";\n    if (barType === 1) return \"bar current\";\n    if (barType === 2) return \"bar sorted\";\n  };\n  const showBarHeight = (thisIndex) => {\n    if (barsList.length === 5 || barsList.length === 10) {\n      const barHeight = barsList.filter((bar, index) => index === thisIndex)[0].height;\n      return barHeight/4;\n    }\n  };\n  return (\n    <div className=\"barsList\">\n      {barsList\n        ? barsList.map((bar, index) => (\n            <div\n              className={getBarColor(bar.type)}\n              key={index}\n              style={{ height: `${bar.height}px` }}\n              height={bar.height}\n              value={bar.height}\n            >\n              <span> {showBarHeight(index)} </span>\n            </div>\n          ))\n        : \"Loading bar chart\"}\n    </div>\n  );\n};\n\nexport default BarChart;\n","\nexport const swap = (items, leftIndex, rightIndex) => {\n    let temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\n\n","import { swap } from \"./_helpers\";\n\nexport const quickSort = (barsArr) => {\n  let movingBars = [];\n  divider(movingBars, barsArr, 0, barsArr.length - 1);\n  return movingBars;\n};\n\nconst divider = (movingBars, barsIDsArr, start, end) => {\n  if (start < end) {\n    let pivot = partition(movingBars, barsIDsArr, start, end);\n    divider(movingBars, barsIDsArr, start, pivot - 1);\n    divider(movingBars, barsIDsArr, pivot + 1, end);\n  }\n};\n\nconst partition = (movingBars, barsArr, start, end) => {\n  let prevIdx = start - 1;\n  for (let index = start; index < end; index++) {\n    if (index !== end) {\n      movingBars.push([index, end, false]);\n    }\n    if (barsArr[index] < barsArr[end]) {\n      ++prevIdx;\n      swap(barsArr, index, prevIdx);\n      movingBars.push([index, prevIdx, true]);\n    }\n  }\n  swap(barsArr, prevIdx + 1, end);\n  movingBars.push([end, prevIdx + 1, true]);\n  return prevIdx + 1;\n};\n\nexport const QuickSortDesc = {\n  title: (\n    <a\n      href=\"https://en.wikipedia.org/wiki/Quicksort\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Quick Sort\n    </a>\n  ),\n  description: (\n    <div>\n      <p>\n        <b>Quick Sort </b>\n        is an in-place, divide-and-conquer algorithm that can be faster\n        than MergeSort and HeapSort. It\n        works by dividing a large array into two smaller sub-array saccording to whether they are less than or greater than the pivot. \n        The sub-arrays are recursively sorted. The steps are:\n      </p>\n      <ol>\n        <li>\n          Pick an element, called a pivot, from the array.\n        </li>\n        <li>Move pivot element to the start of the array.</li>\n        <li>\n          <em>Partitioning: </em> reorder the array so that all elements with\n          values less than the pivot come before the pivot, while all elements\n          with values greater than the pivot come after it (equal values can go\n          either way). After this partitioning, the pivot is in its final\n          position.\n        </li>\n        <li>\n          Recursively apply the above steps to the sub-array of elements with\n          smaller values and separately to the sub-array of elements with\n          greater values.\n        </li>\n      </ol>\n    \n    </div>\n  ),\n  worstCase: (\n    <span>\n      O(<em>n</em>\n      <sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(<em>n</em>log<em>n</em>)\n    </span>\n  ),\n  bestCase: (\n    <span>\n      O(<em>n</em>log<em>n</em>)\n    </span>\n  ),\n  space: (\n    <span>\n      O(log<em>n</em>)\n    </span>\n  ),\n};\n","  \nexport const bubbleSort = (barsList) => {\n    let movingBars = [];\n    let length = barsList.length;\n\n    for (let num = 0; num < length - 1; num++) {\n        for (let nextNum = 0; nextNum < length - num - 1; nextNum++) {\n            let firstBar = barsList[nextNum]\n            let secondBar = barsList[nextNum + 1]\n            if (firstBar > secondBar) {\n                //swap firstBar and secondBar\n                barsList[nextNum] = secondBar\n                barsList[nextNum + 1] = firstBar\n                // true is swapped \n                movingBars.push([nextNum, nextNum + 1, true])\n            } else {\n                // false is not swapped \n                movingBars.push([nextNum, nextNum + 1, false])\n            }\n        }\n    }\n    return movingBars;\n};\n\nexport const BubbleSortDesc = {\n      title:  <a\n              href=\"https://en.wikipedia.org/wiki/Bubble_sort\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            > Bubble Sort </a>,\n    description: (\n      <p>\n        <b>Bubble Sort</b> is a simple sorting algorithm that repeatedly steps through the\n        list, compares adjacent elements and swaps them if they are in the\n        wrong order.The pass through the list is repeated until the list\n        is sorted. The algorithm, which is a comparison sort, is named for\n        the way smaller or larger elements \"bubble\" to the top of the\n        list. Although the algorithm is simple, it is too slow and\n        impractical for most problems\n      </p>\n    ),\n    worstCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    avgCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    bestCase: <span>O(n)</span>,\n    space: <span>O(1)</span>\n  };","import { swap } from \"./_helpers\";\n\nexport const selectionSort = (arr) => {\n  let movingBars = [];\n  let length = arr.length;\n  for (let i = 0; i < length; i++) {\n    let minIdx = i;\n    for (let j = i + 1; j < length; j++) {\n      if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n      }\n      movingBars.push([j, minIdx, false]);\n    }\n    swap(arr, i, minIdx);\n    movingBars.push([i, minIdx, true]);\n  }\n  return movingBars;\n};\n\nexport const SelectionSortDesc = {\n  title: (\n    <a\n      href=\"https://en.wikipedia.org/wiki/Selection_sort\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Selection Sort\n    </a>\n  ),\n  description: (\n    <p>\n      <b>Selection Sort </b>\n      is an in-place comparison sorting algorithm that divides the input list\n      into two parts: the sublist of items already sorted, which is built up\n      from left to right at the front (left) of the list, and the sublist of\n      items remaining to be sorted that occupy the rest of the list. Initially,\n      the sorted sublist is empty and the unsorted sublist is the entire input\n      list. The algorithm proceeds by finding the smallest element in the\n      unsorted sublist, exchanging (swapping) it with the leftmost unsorted\n      element (putting it in sorted order), and moving the sublist boundaries\n      one element to the right.\n    </p>\n  ),\n  worstCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  bestCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  space: <span>O(1)</span>,\n};\n","import { swap } from \"./_helpers\";\n\nexport const insertionSort = (arr) => {\n  let movingBars = [];\n  let length = arr.length;\n  for (let i = 0; i < length - 1; i++) {\n    let j = i;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      swap(arr, j, j + 1);\n      movingBars.push([j, j + 1, true]);\n      j--;\n    }\n  }\n  return movingBars;\n};\n\nexport const InsertionSortDesc = {\n  title: (\n    <a\n      href=\"https://en.wikipedia.org/wiki/Insertion_sort\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Insertion Sort\n    </a>\n  ),\n  description: (\n    <p>\n      <b>Insertion Sort </b>\n      is a simple sorting algorithm that builds the final sorted array (or list)\n      one item at a time. It is much less efficient on large lists than more\n      advanced algorithms such as quicksort, heapsort, or merge sort. \n      Compared to other quadratic sorting algorithms like\n      bubble sort and selection sort, it is efficient for small data sets and those that are already substantially sorted.\n    </p>\n  ),\n  worstCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  bestCase: <span>O(n)</span>,\n  space: <span>O(1)</span>,\n};\n","export const mergeSort = (barsArr) => {\n  let movingBars = [];\n  let length = barsArr.length;\n  divide(barsArr, movingBars, 0, length - 1);\n  return movingBars;\n};\n\nconst divide = (barsArr, movingBars, start, end) => {\n  if (start < end) {\n    let mid = Math.floor((end + start) / 2);\n    divide(barsArr, movingBars, start, mid);\n    divide(barsArr, movingBars, mid + 1, end);\n    merge(barsArr, movingBars, start, mid, end);\n  }\n};\n\nconst merge = (barsArr, movingBars, start, mid, end) => {\n  let sortedArr = [];\n  let i = start;\n  let j = mid + 1;\n  while (i <= mid && j <= end) {\n    if (barsArr[i] <= barsArr[j]) sortedArr.push(barsArr[i++]);\n    else sortedArr.push(barsArr[j++]);\n  }\n  while (i <= mid) {\n    sortedArr.push(barsArr[i++]);\n  }\n  while (j <= end) {\n    sortedArr.push(barsArr[j++]);\n  }\n\n  let indexes = [];\n  for (let i = start; i <= end; i++) {\n    indexes.push(i);\n  }\n\n  for (let i = start; i <= end; i++) {\n    barsArr[i] = sortedArr[i - start];\n    movingBars.push([i, barsArr[i], true, indexes]);\n  }\n};\n\nexport const MergeSortDesc = {\n  title: (\n    <a\n      href=\"https://en.wikipedia.org/wiki/Merge_sort\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Merge Sort\n    </a>\n  ),\n  description: (\n    <div>\n      <p>\n        <b>Merge Sort </b>\n        is an efficient, comparison-based sorting algorithm that makes use of the divide\n        and conquer strategy. Most implementations produce a stable sort, which means that the order of equal elements is the same in the input and output.  \n        Conceptually the algorithm works as follows:\n      </p>\n      <ol>\n        <li>\n          Divide the unsorted list into <em>n</em> sublists, each containing one\n          element(a list of one element is considered sorted)\n        </li>\n        <li>\n          Repeatedly merge sublists to produce new sorted sublists until there\n          is only one sublist remaining. This will be the sorted list.\n        </li>\n      </ol>\n    </div>\n  ),\n  worstCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  bestCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  space: (\n    <span>\n      O(<em>n</em>)\n    </span>\n  ),\n};\n","import { swap } from \"./_helpers\";\n\nexport const heapSort = (barsArr) => {\n  let movingBars = [];\n  let length = barsArr.length;\n  //build max heap\n  for (let i = Math.ceil(length / 2) - 1; i >= 0; i--) {\n    heapify(movingBars, barsArr, length, i);\n  }\n  for (let i = length - 1; i >= 0; i--) {\n    movingBars.push([i, 0, true]);\n    swap(barsArr, i, 0);\n    heapify(movingBars, barsArr, i, 0);\n  }\n  return movingBars;\n};\n\nconst heapify = (movingBars, barsArr, length, index) => {\n  let largest = index;\n  let left = 2 * index + 1;\n  let right = 2 * index + 2;\n\n  if (barsArr[left] > barsArr[largest] && left < length) {\n    //left child is larger than index\n    largest = left;\n  }\n\n  if (barsArr[right] > barsArr[largest] && right < length) {\n    largest = right;\n  }\n\n  if (largest !== index) {\n    movingBars.push([index, largest, true]);\n    swap(barsArr, index, largest);\n    heapify(movingBars, barsArr, length, largest, true);\n  }\n};\n\nexport const HeapSortDesc = {\n  title: (\n    <a\n      href=\"https://en.wikipedia.org/wiki/Heapsort\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Heap Sort\n    </a>\n  ),\n  description: (\n    <div>\n      <p>\n        <b>Heap Sort </b>\n        is a comparison-based sorting algorithm that uses the heap data\n        structure rather than a linear-time search to find the maximum or\n        minimum element. Unlike Selection Sort, Heap Sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step.\n      </p>\n      <p>\n        The heapsort algorithm can be divided into two parts. In the first step,\n        a heap is built out of the data. In the second step, a sorted\n        array is created by repeatedly removing the largest element from the\n        heap (the root of the heap), and inserting it into the array. The heap\n        is updated after each removal to maintain the heap property.\n      </p>\n      \n    </div>\n  ),\n  worstCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  bestCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  space: <span>O(1)</span>,\n};\n","import React from \"react\";\nimport { QuickSortDesc } from \"./../algorithms/quickSort\";\nimport { BubbleSortDesc } from \"./../algorithms/bubbleSort\";\nimport { SelectionSortDesc } from \"./../algorithms/selectionSort\";\nimport { InsertionSortDesc } from \"./../algorithms/insertionSort\";\nimport { MergeSortDesc } from \"./../algorithms/mergeSort\";\nimport { HeapSortDesc } from \"./../algorithms/heapSort\";\n\nconst AlgoExplained = ({ algoName }) => {\n  let algoDesc;\n  if (algoName === \"Quick Sort\") algoDesc = QuickSortDesc;\n  if (algoName === \"Bubble Sort\") algoDesc = BubbleSortDesc;\n  if (algoName === \"Selection Sort\") algoDesc = SelectionSortDesc;\n  if (algoName === \"Insertion Sort\") algoDesc = InsertionSortDesc;\n  if (algoName === \"Merge Sort\") algoDesc = MergeSortDesc;\n  if (algoName === \"Heap Sort\") algoDesc = HeapSortDesc;\n\n  const { title, description, worstCase, avgCase, bestCase, space } = algoDesc;\n  return (\n    <div className=\"SortInfo\">\n      <hr />\n      <h1>{title ? title : \"Select Algorithm\"}</h1>\n\n      <div className=\"SortInfo__Body\">\n        <article className=\"SortInfo__Article\">\n          {description ? (\n            description\n          ) : (\n            <p>\n              You must select an algorithm before you can visualize it's\n              execution on an array of numbers.\n            </p>\n          )}\n        </article>\n\n        <aside className=\"SortInfo__Aside\">\n          <h3>Performance</h3>\n          <table className=\"performance\">\n            <tbody>\n              <tr>\n                <td>Worst-case time complexity </td>\n                <td>\n                  <code>{worstCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Average time complexity</td>\n                <td>\n                  <code>{avgCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Best-case time complexity</td>\n                <td>\n                  <code>{bestCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Worst-case space complexity </td>\n                <td>\n                  <code>{space}</code>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </aside>\n      </div>\n    </div>\n  );\n};\n\nexport default AlgoExplained;\n","import { bubbleSort } from \"../../algorithms/bubbleSort\";\nimport { insertionSort } from \"../../algorithms/insertionSort\";\nimport { selectionSort } from \"../../algorithms/selectionSort\";\nimport { heapSort } from \"../../algorithms/heapSort\";\nimport { mergeSort } from \"../../algorithms/mergeSort\";\nimport { quickSort } from \"../../algorithms/quickSort\";\n\nexport const generateBarChart = (numOfBars) => {\n  let newBars = [];\n  let min = 5,\n    max = 100;\n  for (let i = 0; i < numOfBars; i++) {\n    const id = Date.now().toString() + i.toString();\n    const height = 4 * Math.floor(Math.random() * (max - min + 1) + min);\n    newBars.push({ id: parseInt(id), height: parseInt(height), type: 0 });\n  }\n  return newBars;\n};\n\nexport const sortDescBars = (barsArr) => {\n  barsArr.sort(function(a,b) {\n    return b.height - a.height\n  })\n}\n\nexport const swapBarsArr = (idx, bars) => {\n  let newbars = JSON.parse(JSON.stringify(bars));\n  let temp = newbars[idx[0]].height;\n  newbars[idx[0]].height = newbars[idx[1]].height;\n  newbars[idx[1]].height = temp;\n  return newbars;\n};\n\nexport const pause = async (speed) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, 450 / speed);\n  });\n};\n\nexport const generateMovingBars = (algoID, algoOptions, barsList) => {\n  const algoName = getAlgoName(algoID, algoOptions);\n  let movingBars = [];\n  if (algoName === \"Bubble Sort\") {\n    movingBars = bubbleSort(barsList);\n  }\n  if (algoName === \"Selection Sort\") {\n    movingBars = selectionSort(barsList);\n  }\n  if (algoName === \"Insertion Sort\") {\n    movingBars = insertionSort(barsList);\n  }\n  if (algoName === \"Merge Sort\") {\n    movingBars = mergeSort(barsList);\n  }\n  if (algoName === \"Quick Sort\") {\n    movingBars = quickSort(barsList);\n  }\n  if (algoName === \"Heap Sort\") {\n    movingBars = heapSort(barsList);\n  }\n  return movingBars;\n};\n\nexport const getAlgoName = (algoID, algoOptions) => {\n  return algoOptions.find((algo) => algo.id === algoID).type;\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { generateBarChart, sortDescBars } from \"../components/utils/utils\";\n\nexport const chartSlice = createSlice({\n  name: \"chart\",\n  initialState: {\n    barsList: [],\n    movingBars: [],\n    isPaused: true,\n    finished: true,\n    worstCase: false,\n    menuChanged: false,\n    currentAlgo: 1,\n    speed: 1,\n    numOfBars: 5,\n    algoOptions: [\n      { id: 1, type: \"Bubble Sort\" },\n      { id: 2, type: \"Selection Sort\" },\n      { id: 3, type: \"Insertion Sort\" },\n      { id: 4, type: \"Merge Sort\" },\n      { id: 5, type: \"Quick Sort\" },\n      { id: 6, type: \"Heap Sort\" },\n    ],\n    numOfBarsOptions: [5, 10, 20, 30, 50, 70, 100],\n    speedOptions: [0.5, 0.75, 1.0, 2.0, 4.0],\n    barTypes: [{ NORMAL: 0 }, { CURRENT: 1 }, { SORTED: 2 }],\n  },\n  reducers: {\n    createList: (state, action) => {\n      state.barsList = action.payload.barsList;\n    },\n    saveMovingBars: (state, action) => {\n      state.movingBars = action.payload.movingBars;\n    },\n    clearMovingBars: (state) => {\n      state.movingBars = [];\n    },\n    changePaused: (state, action) => {\n      state.isPaused = action.payload.isPaused;\n    },\n    changeMenu: (state, action) => {\n      state.menuChanged = action.payload.menuChanged;\n    },\n    changeFinished: (state, action) => {\n      state.finished = action.payload.finished;\n    },\n    changeAlgo: (state, action) => {\n      state.currentAlgo = action.payload.currentAlgo;\n      state.menuChanged = true;\n    },\n    changeWorstCase: (state, action) => {\n      state.worstCase = action.payload.worstCase;\n      state.menuChanged = true;\n    },\n    changeNumOfBars: (state, action) => {\n      state.numOfBars = action.payload.numOfBars;\n      state.menuChanged = true;\n    },\n    changeSpeed: (state, action) => {\n      state.speed = action.payload.speed;\n      state.menuChanged = true;\n    },\n    swappingBars: (state, action) => {\n      const { barsInCheck, barsList } = action.payload;\n      let newbars = JSON.parse(JSON.stringify(barsList));\n      let temp = newbars[barsInCheck[0]].height;\n      newbars[barsInCheck[0]].height = newbars[barsInCheck[1]].height;\n      newbars[barsInCheck[1]].height = temp;\n      state.barsList = newbars;\n    },\n    changeBarColor: (state, action) => {\n      const { barIndexesToChange, barColor, barsList } = action.payload;\n      let newbars = JSON.parse(JSON.stringify(barsList));\n      for (let i = 0; i < barIndexesToChange.length; i++) {\n        const barIndex = barIndexesToChange[i];\n        newbars[barIndex].type = barColor;\n      }\n      state.barsList = newbars;\n    },\n    changeAllBarsColors: (state, action) => {\n      const { barsList, barColor } = action.payload;\n      let newbars = JSON.parse(JSON.stringify(barsList));\n      for (let i = 0; i < state.numOfBars; i++) {\n        newbars[i].type = barColor;\n      }\n      state.barsList = newbars;\n    },\n    changeBarHeight: (state, action) => {\n      const { barsList, barsRange } = action.payload;\n      let newbars = JSON.parse(JSON.stringify(barsList));\n      newbars[barsRange[0]].height = barsRange[1];\n      state.barsList = newbars;\n    },\n  },\n});\n\nexport const {\n  createList,\n  saveMovingBars,\n  clearMovingBars,\n  changeAlgo,\n  changeNumOfBars,\n  changeSpeed,\n  changePaused,\n  changeMenu,\n  swappingBars,\n  changeBarColor,\n  changeAllBarsColors,\n  changeBarHeight,\n  changeFinished,\n  changeWorstCase,\n} = chartSlice.actions;\n\nexport const swappingBarsAsync = (barsInCheck) =>\n  async function (dispatch, getState) {\n    const { barsList } = getState().chart;\n    dispatch(swappingBars({ barsInCheck, barsList }));\n  };\n\nexport const changeBarColorAsync =\n  (barIndexesToChange, barColor) => async (dispatch, getState) => {\n    const { barsList } = getState().chart;\n    dispatch(changeBarColor({ barIndexesToChange, barColor, barsList }));\n  };\n\nexport const changeAllBarColorAsync =\n  (barColor) => async (dispatch, getState) => {\n    const { barsList } = getState().chart;\n    dispatch(changeAllBarsColors({ barsList, barColor }));\n  };\n\nexport const changeBarHeightAsync =\n  (barsRange) => async (dispatch, getState) => {\n    const { barsList } = getState().chart;\n    dispatch(changeBarHeight({ barsList, barsRange }));\n  };\n\nexport const resetChartAsync = () => async (dispatch, getState) => {\n  const { numOfBars } = getState().chart;\n  document.getElementById(\"flexCheckDefault\").checked = false;\n  dispatch(changeFinished({ finished: true }));\n  dispatch(changePaused({ isPaused: true }));\n  dispatch(createList({ barsList: generateBarChart(numOfBars) }));\n  dispatch(changeWorstCase({ worstCase: false }));\n  dispatch(clearMovingBars());\n  // dispatch(changeMenu({ menuChanged: false }));\n};\n\nexport const reverseChartAsync = () => async (dispatch, getState) => {\n  const { numOfBars } = getState().chart;\n  let newbars = generateBarChart(numOfBars);\n  sortDescBars(newbars);\n\n  dispatch(changeFinished({ finished: true }));\n  dispatch(changePaused({ isPaused: true }));\n  dispatch(changeWorstCase({ worstCase: true }));\n  dispatch(createList({ barsList: newbars }));\n  dispatch(clearMovingBars());\n\n  // dispatch(changeMenu({ menuChanged: false }));\n};\n\nexport default chartSlice.reducer;\n","export const selectBarsList = (state) => state.chart.barsList;\nexport const selectMovingBars = (state) => state.chart.movingBars;\nexport const selectCurrentAlgo = (state) => state.chart.currentAlgo;\nexport const selectAlgoOptions = (state) => state.chart.algoOptions;\nexport const selectColors = (state) => state.chart.barTypes;\nexport const selectPaused = (state) => state.chart.isPaused;\nexport const selectSpeedOptions = (state) => state.chart.speedOptions;\nexport const selectCurrentSpeed = (state) => state.chart.speed;\nexport const selectNumOfBars = (state) => state.chart.numOfBars;\nexport const selectNumOfBarsOptions = (state) => state.chart.numOfBarsOptions;\nexport const selectFinish = (state) => state.chart.finished;\nexport const selectWorstCase = (state) => state.chart.worstCase;\nexport const selectMenuChanged = (state) => state.chart.menuChanged;","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport BarChart from \"./BarChart\";\nimport AlgoExplained from \"./AlgoExplained\";\nimport { generateBarChart, getAlgoName } from \"./utils/utils\";\nimport { createList } from \"../redux/chartSlice\";\nimport {\n  selectBarsList,\n  selectNumOfBars,\n  selectCurrentAlgo,\n  selectAlgoOptions,\n} from \"../redux/selectors\";\n\nconst SortingVisualizer = () => {\n  const dispatch = useDispatch();\n  const numOfBars = useSelector(selectNumOfBars);\n  const currentAlgo = useSelector(selectCurrentAlgo);\n  const algoOptions = useSelector(selectAlgoOptions);\n  const barsList = useSelector(selectBarsList);\n  const newBars = generateBarChart(numOfBars);\n\n  useEffect(() => {\n    dispatch(createList({ barsList: newBars }));\n  }, []);\n\n  return (\n    <div id=\"content\">\n      <BarChart barsList={barsList} />\n      <AlgoExplained algoName={getAlgoName(currentAlgo, algoOptions)} />\n    </div>\n  );\n};\n\nexport default SortingVisualizer;\n","import React from \"react\";\nimport { faGithub, faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nconst Footer = () => {\n  return (\n    <footer className=\"text-center mt-4 text-white position-absolute\">\n      <div className=\"container p-3 pb-2\">\n        <section>\n          <a\n            className=\"btn btn-outline-light btn-floating m-1\"\n            href=\"https://github.com/tttn13\"\n            role=\"button\"\n            target=\"_blank\" rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faGithub} />\n          </a>\n\n          <a\n            className=\"btn btn-outline-light btn-floating m-1\"\n            href=\"#!\"\n            role=\"button\"\n            target=\"_blank\" rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faUser} />\n          </a>\n\n          <a\n            className=\"btn btn-outline-light btn-floating m-1\"\n            href=\"https://www.linkedin.com/in/thi-nguyen-1310/\"\n            role=\"button\"\n            target=\"_blank\" rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faLinkedin} />\n          </a>\n        </section>\n      </div>\n      <div className=\"text-center p-3\">\n        &copy; {new Date().getFullYear()} Copyright: Thi Nguyen{\" \"}\n        <span style={{ color: \"#e25555\" }}>&#9829;</span>\n        <a\n          className=\"nav-link\"\n          style={{ fontWeight: \"600\" }}\n          href=\"https://github.com/tttn13/sorting-visualizer\"\n          target=\"_blank\" rel=\"noopener noreferrer\"\n        >\n          Source Code\n        </a>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeAlgo, resetChartAsync } from \"../redux/chartSlice\";\n\nconst AlgoMenu = ({ currentAlgo, algoOptions }) => {\n  const dispatch = useDispatch();\n  const [buttonText, setButtonText] = useState(\"Algorithm\");\n\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-secondary dropdown-toggle\"\n        type=\"button\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n      >\n        {buttonText}\n      </button>\n      <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\n        <li>\n          <button\n            className=\"dropdown-item disabled\"\n            tabIndex=\"-1\"\n            aria-disabled=\"true\"\n          >\n            Algorithm\n          </button>\n        </li>\n        {algoOptions\n          ? algoOptions.map((algo, idx) => (\n              <li key={idx}>\n                <button\n                  className=\"dropdown-item text-dark\"\n                  type=\"button\"\n                  key={algo.id}\n                  value={algo.type}\n                  onClick={(e) => {\n                    setButtonText(e.target.value);\n                    const algo = algoOptions.find(\n                      (algo) => algo.type === e.target.value\n                    );\n                    dispatch(changeAlgo({ currentAlgo: algo.id }));\n                    dispatch(resetChartAsync());\n                  }}\n                >\n                  {algo.type}\n                </button>\n              </li>\n            ))\n          : \"Loading menu\"}\n      </ul>\n    </div>\n  );\n};\n\nexport default AlgoMenu;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeSpeed, resetChartAsync } from \"../redux/chartSlice\";\n\nconst SpeedMenu = ({ speed, speedOptions }) => {\n  const dispatch = useDispatch();\n  const [buttonText, setButtonText] = useState(\"Speed\");\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-secondary dropdown-toggle\"\n        id=\"speedBtn\"\n        type=\"button\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n      >\n        {buttonText}\n      </button>\n      <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\n        <li>\n          <button\n            className=\"dropdown-item disabled\"\n            tabIndex=\"-1\"\n            aria-disabled=\"true\"\n          >\n            Speed\n          </button>\n        </li>\n        {speedOptions\n          ? speedOptions.map((item, idx) => (\n              <li key={idx}>\n                <button\n                  className=\"dropdown-item text-dark\"\n                  type=\"button\"\n                  key={item}\n                  value={item}\n                  onClick={(e) => {\n                    setButtonText(e.target.value + \"x\");\n                    dispatch(changeSpeed({ speed: e.target.value }));\n                    dispatch(resetChartAsync());\n                  }}\n                >\n                  {item}x\n                </button>\n              </li>\n            ))\n          : \"Loading menu\"}\n      </ul>\n    </div>\n  );\n};\n\nexport default SpeedMenu;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeNumOfBars, resetChartAsync } from \"../redux/chartSlice\";\n\nconst NumOfBarsMenu = ({ numOfBars, numOfBarsOptions }) => {\n  const dispatch = useDispatch();\n  const [buttonText, setButtonText] = useState(\"Size\");\n\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-secondary dropdown-toggle\"\n        type=\"button\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n      >\n        {buttonText}\n      </button>\n      <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\n        <li>\n          <button\n            className=\"dropdown-item disabled\"\n            tabIndex=\"-1\"\n            aria-disabled=\"true\"\n          >\n            Size\n          </button>\n        </li>\n        {numOfBarsOptions\n          ? numOfBarsOptions.map((item, idx) => (\n              <li key={idx}>\n                <button\n                  className=\"dropdown-item text-dark\"\n                  type=\"button\"\n                  key={item * 10}\n                  value={item}\n                  onClick={(e) => {\n                    setButtonText(e.target.value);\n                    dispatch(changeNumOfBars({ numOfBars: e.target.value }));\n                    dispatch(resetChartAsync());\n                  }}\n                >\n                  {item}\n                </button>\n              </li>\n            ))\n          : \"Loading menu\"}\n      </ul>\n    </div>\n  );\n};\n\nexport default NumOfBarsMenu;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  resetChartAsync,\n  reverseChartAsync,\n} from \"../redux/chartSlice\";\n\nconst WorstCaseCheckBox = () => {\n  const dispatch = useDispatch();\n  const handleCheckBox = (e) => {\n    if (e.target.checked === true) {\n      dispatch(reverseChartAsync());\n    } else {\n      dispatch(resetChartAsync());\n    }\n  };\n\n  return (\n    <div className=\"form-check\">\n      <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\n        <input\n          className=\"form-check-input\"\n          type=\"checkbox\"\n          id=\"flexCheckDefault\"\n          onChange={(e) => handleCheckBox(e)}\n        />\n        Worst Case\n      </label>\n    </div>\n  );\n};\n\nexport default WorstCaseCheckBox;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeMenu, resetChartAsync } from \"../redux/chartSlice\";\nimport { selectPaused } from \"../redux/selectors\";\n\nconst RandomizeBtn = () => {\n  const dispatch = useDispatch();\n  const isPaused = useSelector(selectPaused);\n\n  const handleClick = () => {\n    dispatch(changeMenu({ menuChanged: true }));\n    dispatch(resetChartAsync());\n  };\n\n  return (\n    <button\n      type=\"button\"\n      id=\"randomizeBtn\"\n      className=\"btn btn-outline-secondary\"\n      onClick={() => {\n        isPaused && handleClick();\n      }}\n    >\n      Randomize\n    </button>\n  );\n};\n\nexport default RandomizeBtn;\n","import { combineReducers } from 'redux';\nimport chartSliceReducer from './chartSlice';\n\nconst rootReducer = combineReducers({\n    chart: chartSliceReducer,\n})\nexport default rootReducer\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \".\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n","import { generateMovingBars, pause } from \"./utils\";\nimport store from \"../../redux/store\";\nimport {\n  swappingBarsAsync,\n  changeBarColorAsync,\n  changeAllBarColorAsync,\n  changeBarHeightAsync,\n  saveMovingBars,\n  changePaused,\n  changeFinished,\n  changeWorstCase,\n   resetChartAsync, reverseChartAsync \n} from \"../../redux/chartSlice\";\n\nconst getState = () => {\n  return store.getState().chart;\n};\n\nexport const swappingMovingBars = async (speed, newMovingBars) => {\n  while (newMovingBars.length > 0) {\n    let { isPaused, finished, menuChanged, worstCase } = getState();\n    if (menuChanged) {\n      (!worstCase)\n      ? store.dispatch(resetChartAsync())\n      : store.dispatch(reverseChartAsync())\n      break;\n    } else {\n      if (isPaused && !finished) {\n        const currentStop = newMovingBars[0];\n        stopMoving([currentStop[0], currentStop[1]], newMovingBars);\n        break;\n      }\n    }\n\n    store.dispatch(changeAllBarColorAsync(getBarColor(\"NORMAL\")));\n    let barsAndStateInCheck = newMovingBars[0];\n    let barsInCheck = [barsAndStateInCheck[0], barsAndStateInCheck[1]];\n\n    store.dispatch(changeBarColorAsync(barsInCheck, getBarColor(\"CURRENT\")));\n    await pause(speed);\n\n    if (barsAndStateInCheck[2] === true) {\n      console.log(\"we are swapping\");\n      store.dispatch(swappingBarsAsync(barsInCheck));\n      await pause(speed);\n    }\n\n    store.dispatch(changeBarColorAsync(barsInCheck, getBarColor(\"NORMAL\")));\n    await pause(speed);\n    newMovingBars.shift();\n  }\n  finishSorting(newMovingBars);\n};\n\nexport const animateBarsInRange = async (speed, newMovingBars) => {\n  console.log(\"animateBarsInRange\");\n  let prevRange = [];\n  while (newMovingBars.length > 0) {\n    let { isPaused, finished, menuChanged, worstCase } = getState();\n    if (menuChanged) {\n      (!worstCase)\n      ? store.dispatch(resetChartAsync())\n      : store.dispatch(reverseChartAsync())\n      break;\n    } else {\n      if (isPaused && !finished) {\n      // const currentStop = newMovingBars[0][3]\n        stopMoving(prevRange, newMovingBars);\n        break;\n      }\n    }\n\n    store.dispatch(changeAllBarColorAsync(getBarColor(\"NORMAL\")));\n    if (prevRange !== newMovingBars[0][3]) {\n      store.dispatch(changeBarColorAsync(prevRange, getBarColor(\"NORMAL\")));\n      await pause(speed);\n\n      prevRange = newMovingBars[0][3];\n      store.dispatch(changeBarColorAsync(newMovingBars[0][3], getBarColor(\"CURRENT\")));\n      await pause(speed);\n    }\n\n    let currRange = [newMovingBars[0][0], newMovingBars[0][1]];\n    store.dispatch(changeBarHeightAsync(currRange));\n    await pause(speed);\n    newMovingBars.shift();\n  }\n  finishSorting(newMovingBars);\n};\n\nconst stopMoving = async (barsToChange, newMovingBars) => {\n  store.dispatch(changeBarColorAsync(barsToChange, getBarColor(\"CURRENT\")));\n  store.dispatch(saveMovingBars({ movingBars: newMovingBars }));\n};\n\nexport const startSorting = async (\n  currentMovingBars,\n  barsList,\n  currentAlgo,\n  algoOptions,\n  speed\n) => {\n  let newMovingBars;\n  if (currentMovingBars.length > 0) {\n    newMovingBars = currentMovingBars;\n  } else {\n    const barHeights = barsList.map((bar) => bar.height);\n    newMovingBars = generateMovingBars(currentAlgo, algoOptions, barHeights);\n  }\n\n  if (currentAlgo === 4) {\n    await animateBarsInRange(speed, newMovingBars);\n  } else {\n    await swappingMovingBars(speed, newMovingBars);\n  }\n};\n\nconst finishSorting = (newMovingBars) => {\n  if (newMovingBars.length === 0 && !getState().finished) {\n    console.log(\"no more bars to move\");\n    store.dispatch(changeAllBarColorAsync(getBarColor(\"SORTED\")));\n    store.dispatch(changeFinished({ finished: true }));\n    store.dispatch(changePaused({ isPaused: true }));\n    store.dispatch(changeWorstCase({ worstCase: false }));\n  }\n};\n\nexport const getBarColor = (color) => {\n  const barColors = getState().barTypes;\n  if (color === \"CURRENT\") return barColors[1].CURRENT;\n  if (color === \"NORMAL\") return barColors[0].NORMAL;\n  if (color === \"SORTED\") return barColors[2].SORTED;\n};\n","import React from \"react\";\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectPaused,\n  selectMovingBars,\n  selectCurrentAlgo,\n  selectAlgoOptions,\n  selectCurrentSpeed,\n  selectBarsList,\n} from \"../redux/selectors\";\nimport { startSorting } from \"./utils/animations\";\nimport { changeFinished, changeMenu, changePaused } from \"../redux/chartSlice\";\n\nconst PlayBtn = () => {\n  const dispatch = useDispatch();\n  const isPaused = useSelector(selectPaused);\n  const currentAlgo = useSelector(selectCurrentAlgo);\n  const algoOptions = useSelector(selectAlgoOptions);\n  const speed = useSelector(selectCurrentSpeed);\n  const barsList = useSelector(selectBarsList);\n  const movingBars = useSelector(selectMovingBars).slice();\n\n  const handlePlayClick = () => {\n    dispatch(changeMenu({ menuChanged: false }));\n    dispatch(changeFinished({ finished: false }));\n    dispatch(changePaused({ isPaused: false }));\n    startSorting(movingBars, barsList, currentAlgo, algoOptions, speed);\n  };\n\n  return (\n    <button\n      type=\"button\"\n      id=\"startBtn\"\n      className=\"btn btn-danger\"\n      onClick={() => {\n        isPaused && handlePlayClick();\n      }}\n    >\n      <FontAwesomeIcon icon={faPlay} size=\"lg\" />\n    </button>\n  );\n};\n\nexport default PlayBtn;\n","import React from 'react'\nimport { faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinish } from '../redux/selectors';\nimport { changePaused } from '../redux/chartSlice';\n\nconst PauseBtn = () => {\n    const isFinished = useSelector(selectFinish);\n    const dispatch = useDispatch();\n    const handlePauseClick = () => {\n        dispatch(changePaused({ isPaused: true }));\n    }\n    \n    return (\n        <button\n                type=\"button\"\n                id=\"pauseBtn\"\n                className=\"btn btn-danger\"\n                onClick={() => {\n                  !isFinished && handlePauseClick();\n                }}\n              >\n                <FontAwesomeIcon icon={faPause} size=\"lg\" />\n              </button>\n    )\n}\n\nexport default PauseBtn\n","import { useSelector } from \"react-redux\";\nimport AlgoMenu from \"./AlgoMenu\";\nimport SpeedMenu from \"./SpeedMenu\";\nimport NumOfBarsMenu from \"./NumOfBarsMenu\";\nimport WorstCaseCheckBox from \"./WorstCaseCheckBox\";\nimport {\n  selectNumOfBars,\n  selectCurrentAlgo,\n  selectAlgoOptions,\n  selectNumOfBarsOptions,\n  selectCurrentSpeed,\n  selectSpeedOptions,\n  selectPaused,\n} from \"../redux/selectors\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar } from \"@fortawesome/free-regular-svg-icons\";\nimport RandomizeBtn from \"./RandomizeBtn\";\nimport PlayBtn from \"./PlayBtn\";\nimport PauseBtn from \"./PauseBtn\";\n\nconst NavBar = () => {\n  const numOfBars = useSelector(selectNumOfBars);\n  const numOptions = useSelector(selectNumOfBarsOptions);\n  const currentAlgo = useSelector(selectCurrentAlgo);\n  const algoOptions = useSelector(selectAlgoOptions);\n  const speed = useSelector(selectCurrentSpeed);\n  const speedOptions = useSelector(selectSpeedOptions);\n  const isPaused = useSelector(selectPaused);\n  return (\n    <nav\n      className=\"navbar navbar-expand-md navbar-dark py-3 sticky-top\"\n      id=\"navbar\"\n    >\n      <a\n        className=\"navbar-brand mx-3\"\n        href=\"/\"\n        onClick={(e) => {\n          e.preventDefault();\n          window.scrollTo(0, 0);\n        }}\n      >\n        <FontAwesomeIcon icon={faChartBar} size=\"1x\" />\n        <b style={{ padding: \"10px\" }}>Sorting Visualizer</b>\n      </a>\n      <button\n        className=\"navbar-toggler me-2\"\n        id=\"navbar-toggler\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarCollapse\"\n        aria-controls=\"navbarCollapse\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n          <li className=\"nav-item active m-2\">\n            <RandomizeBtn />\n          </li>\n\n          <li className=\"nav-item m-2\">\n            <AlgoMenu currentAlgo={currentAlgo} algoOptions={algoOptions} />\n          </li>\n\n          <li className=\"nav-item m-2 \">\n            <NumOfBarsMenu\n              numOfBars={numOfBars}\n              numOfBarsOptions={numOptions}\n            />\n          </li>\n\n          <li className=\"nav-item m-2 \">\n            <SpeedMenu speed={speed} speedOptions={speedOptions} />\n          </li>\n\n          <li className=\"nav-item m-2\">\n            {isPaused ? <PlayBtn /> : <PauseBtn />}\n          </li>\n\n          <li className=\"nav-item m-2\">\n            <WorstCaseCheckBox />\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import './App.css';\nimport SortingVisualizer from './components/SortingVisualizer'\nimport Footer from './components/Footer'\nimport NavBar from './components/NavBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <SortingVisualizer />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}