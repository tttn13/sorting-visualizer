{"version":3,"sources":["algorithms/bubbleSort.js","algorithms/helpers.js","algorithms/insertionSort.js","algorithms/selectionSort.js","algorithms/heapSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","components/utils.js","redux/chartSlice.js","components/AlgoMenu.js","components/SpeedMenu.js","components/NumOfBarsMenu.js","components/WorstCaseCheckBox.js","components/BarChart.js","components/AlgoExplained.js","redux/selectors.js","redux/index.js","redux/store.js","components/animations.js","components/hooks/useControl.js","components/SortingVisualizer.js","components/hooks/useRandomize.js","components/Footer.js","App.js","index.js"],"names":["BubbleSortDesc","title","href","target","rel","description","worstCase","avgCase","bestCase","space","swap","items","leftIndex","rightIndex","temp","InsertionSortDesc","SelectionSortDesc","heapify","movingBars","barsArr","length","index","largest","left","right","push","HeapSortDesc","divide","start","end","mid","Math","floor","merge","sortedArr","i","j","indexes","MergeSortDesc","divider","barsIDsArr","pivot","partition","prevIdx","QuickSortDesc","generateBarChart","numOfBars","newBars","id","Date","now","toString","height","random","parseInt","type","pause","speed","a","Promise","resolve","setTimeout","generateMovingBars","algoID","algoOptions","barsList","algoName","getAlgoName","num","nextNum","firstBar","secondBar","bubbleSort","arr","minIdx","selectionSort","insertionSort","mergeSort","quickSort","ceil","heapSort","find","algo","chartSlice","createSlice","name","initialState","currentAlgo","isPaused","optionChanged","finished","numOfBarsOptions","speedOptions","barTypes","NORMAL","CURRENT","SORTED","reducers","createList","state","action","payload","saveMovingBars","changeSpeed","changeAlgo","changePaused","changeOption","changeFinished","changeWorstCase","changeNumOfBars","swappingBars","barsInCheck","newbars","JSON","parse","stringify","changeBarColor","barIndexesToChange","barColor","changeAllBarsColors","changeBarHeight","barsRange","actions","swappingBarsAsync","dispatch","getState","chart","changeBarColorAsync","changeAllBarColorAsync","changeBarHeightAsync","resetChartAsync","AlgoMenu","useDispatch","useState","buttonText","setButtonText","className","tabIndex","map","idx","value","onClick","e","SpeedMenu","item","NumOfBarsMenu","WorstCaseCheckBox","htmlFor","onChange","checked","sort","b","console","log","BarChart","showBarHeight","thisIndex","filter","bar","barType","style","AlgoExplained","algoDesc","selectBarsList","selectMovingBars","selectCurrentAlgo","selectAlgoOptions","selectPaused","selectSpeedOptions","selectCurrentSpeed","selectNumOfBars","selectNumOfBarsOptions","selectOptionChange","selectFinish","rootReducer","combineReducers","chartSliceReducer","store","configureStore","reducer","swappingMovingBars","newMovingBars","currentStop","stopMoving","getBarColor","barsAndStateInCheck","shift","finishSorting","animateBarsInRange","prevRange","currRange","barsToChange","color","barColors","startSorting","barHeights","SortingVisualizer","useSelector","numOptions","isFinished","useEffect","handleRandomizeBtn","slice","useCallback","useRandomize","handlePlayBtn","usePlay","handlePauseBtn","usePause","backgroundColor","preventDefault","window","scrollTo","icon","faChartBar","size","padding","faPlay","faPause","Footer","role","faGithub","faUser","faLinkedin","getFullYear","fontWeight","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b678017.chunk.js","sourcesContent":["  \nexport const bubbleSort = (barsList) => {\n    let length = barsList.length;\n    let movingBars = [];\n    for (let num = 0; num < length - 1; num++) {\n        for (let nextNum = 0; nextNum < length - num - 1; nextNum++) {\n            let firstBar = barsList[nextNum]\n            let secondBar = barsList[nextNum + 1]\n            if (firstBar > secondBar) {\n                //swap firstBar and secondBar\n                barsList[nextNum] = secondBar\n                barsList[nextNum + 1] = firstBar\n                movingBars.push([nextNum, nextNum + 1, true])\n            } else {\n                movingBars.push([nextNum, nextNum + 1, false])\n            }\n        }\n    }\n    return movingBars;\n};\n\nexport const BubbleSortDesc = {\n      title:  <a\n              href=\"https://en.wikipedia.org/wiki/Bubble_sort\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            > Bubble Sort </a>,\n    description: (\n      <p>\n        <b>Bubble Sort</b> is a simple sorting algorithm that repeatedly steps through the\n        list, compares adjacent elements and swaps them if they are in the\n        wrong order.The pass through the list is repeated until the list\n        is sorted. The algorithm, which is a comparison sort, is named for\n        the way smaller or larger elements \"bubble\" to the top of the\n        list. Although the algorithm is simple, it is too slow and\n        impractical for most problems\n      </p>\n    ),\n    worstCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    avgCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    bestCase: <span>O(n)</span>,\n    space: <span>O(1)</span>\n  };","\nexport const swap = (items, leftIndex, rightIndex) => {\n    let temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\n\n","import { swap } from \"./helpers\";\n\nexport const insertionSort = (arr) => {\n  let movingBars = [];\n  let length = arr.length;\n  for (let i = 0; i < length - 1; i++) {\n    let j = i;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      swap(arr, j, j + 1);\n      movingBars.push([j, j + 1, true]);\n      j--;\n    }\n  }\n  return movingBars;\n};\n\nexport const InsertionSortDesc = {\n  title: (\n    <a\n      href=\"https://en.wikipedia.org/wiki/Insertion_sort\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Insertion Sort\n    </a>\n  ),\n  description: (\n    <p>\n      <b>Insertion Sort </b>\n      is a simple sorting algorithm that iterates through an array and at each\n      iteration it removes one element from the array, finds the location it\n      belongs to in the sorted list and inserts it there, repeating until no\n      elements remain in the unsorted list. It is an in-place, stable sorting\n      algorithm that is inefficient on large input arrays but works well for\n      data sets that are almost sorted. It is more efficient in practice\n      compared to other quadratic sorting algorithms like bubble sort and\n      selection sort.\n    </p>\n  ),\n  worstCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  bestCase: <span>O(n)</span>,\n  space: <span>O(1)</span>,\n};\n","import { swap } from \"./helpers\";\n\nexport const selectionSort = (arr) => {\n  let movingBars = [];\n  let length = arr.length;\n  for (let i = 0; i < length; i++) {\n    let minIdx = i;\n    for (let j = i + 1; j < length; j++) {\n      if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n      }\n      movingBars.push([j, minIdx, false]);\n    }\n    swap(arr, i, minIdx);\n    movingBars.push([i, minIdx, true]);\n  }\n  return movingBars;\n};\n\nexport const SelectionSortDesc = {\n  title: (\n    <a\n      href=\"https://en.wikipedia.org/wiki/Selection_sort\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Selection Sort\n    </a>\n  ),\n  description: (\n    <p>\n      <b>Selection Sort </b>\n      is an in-place comparison sorting algorithm that divides the input list\n      into two parts: the sublist of items already sorted, which is built up\n      from left to right at the front (left) of the list, and the sublist of\n      items remaining to be sorted that occupy the rest of the list. Initially,\n      the sorted sublist is empty and the unsorted sublist is the entire input\n      list. The algorithm proceeds by finding the smallest element in the\n      unsorted sublist, exchanging (swapping) it with the leftmost unsorted\n      element (putting it in sorted order), and moving the sublist boundaries\n      one element to the right.\n    </p>\n  ),\n  worstCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  bestCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  space: <span>O(1)</span>,\n};\n","import { swap } from \"./helpers\";\n\nexport const heapSort = (barsArr) => {\n  let movingBars = [];\n  let length = barsArr.length;\n  //build max heap\n  for (let i = Math.ceil(length / 2) - 1; i >= 0; i--) {\n    heapify(movingBars, barsArr, length, i);\n  }\n  for (let i = length - 1; i >= 0; i--) {\n    movingBars.push([i, 0, true]);\n    swap(barsArr, i, 0);\n    heapify(movingBars, barsArr, i, 0);\n  }\n  return movingBars;\n};\n\nconst heapify = (movingBars, barsArr, length, index) => {\n  let largest = index;\n  let left = 2 * index + 1;\n  let right = 2 * index + 2;\n\n  if (barsArr[left] > barsArr[largest] && left < length) {\n    //left child is larger than index\n    largest = left;\n  }\n\n  if (barsArr[right] > barsArr[largest] && right < length) {\n    largest = right;\n  }\n\n  if (largest !== index) {\n    movingBars.push([index, largest, true]);\n    swap(barsArr, index, largest);\n    heapify(movingBars, barsArr, length, largest, true);\n  }\n};\n\nexport const HeapSortDesc = {\n  title: (\n    <a\n      href=\"https://en.wikipedia.org/wiki/Heapsort\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Heap Sort\n    </a>\n  ),\n  description: (\n    <div>\n      <p>\n        <b>Heap Sort </b>\n        can be thought of as an improved selection sort that uses the heap data\n        structure rather than a linear-time search to find the maximum or\n        minimum element. It is an in-place sorting algorithm that is not stable\n        and has a somewhat slower running time than Quicksort in practice.\n      </p>\n      <p>\n        The heapsort algorithm can be divided into two parts. In the first step,\n        a heap is built out of the data. The heap is often placed in an array\n        with the layout of a complete binary tree. In the second step, a sorted\n        array is created by repeatedly removing the largest element from the\n        heap (the root of the heap), and inserting it into the array. The heap\n        is updated after each removal to maintain the heap property. Once all\n        objects have been removed from the heap, the result is a sorted array.\n      </p>\n      <ol>\n        <li>\n          Call the buildMaxHeap() function on the list. Also referred to as\n          heapify(), this builds a heap from a list in O(n) operations.\n        </li>\n        <li>\n          Swap the first element of the list with the final element. Decrease\n          the considered range of the list by one.\n        </li>\n        <li>\n          Call the <em>siftDown()</em>, also called <em>maxHeapify()</em>{\" \"}\n          function on the list to sift the new first element to its appropriate\n          index in the heap.\n        </li>\n        <li>\n          Go to step (2) unless the considered range of the list is one element.\n        </li>\n      </ol>\n    </div>\n  ),\n  worstCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  bestCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  space: <span>O(1)</span>,\n};\n","export const mergeSort = (barsArr) => {\n  let movingBars = [];\n  let length = barsArr.length;\n  divide(barsArr, movingBars, 0, length - 1);\n  return movingBars;\n};\n\nconst divide = (barsArr, movingBars, start, end) => {\n  if (start < end) {\n    let mid = Math.floor((end + start) / 2);\n    divide(barsArr, movingBars, start, mid);\n    divide(barsArr, movingBars, mid + 1, end);\n    merge(barsArr, movingBars, start, mid, end);\n  }\n};\n\nconst merge = (barsArr, movingBars, start, mid, end) => {\n  let sortedArr = [];\n  let i = start;\n  let j = mid + 1;\n  while (i <= mid && j <= end) {\n    if (barsArr[i] <= barsArr[j]) sortedArr.push(barsArr[i++]);\n    else sortedArr.push(barsArr[j++]);\n  }\n  while (i <= mid) {\n    sortedArr.push(barsArr[i++]);\n  }\n  while (j <= end) {\n    sortedArr.push(barsArr[j++]);\n  }\n\n  let indexes = [];\n  for (let i = start; i <= end; i++) {\n    indexes.push(i);\n  }\n\n  for (let i = start; i <= end; i++) {\n    barsArr[i] = sortedArr[i - start];\n    movingBars.push([i, barsArr[i], true, indexes]);\n  }\n};\n\nexport const MergeSortDesc = {\n  title: (\n    <a\n      href=\"https://en.wikipedia.org/wiki/Merge_sort\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Merge Sort\n    </a>\n  ),\n  description: (\n    <div>\n      <p>\n        <b>Merge Sort </b>\n        is an efficient, stable sorting algorith that makes use of the divide\n        and conquer strategy. Conceptually the algorithm works as follows:\n      </p>\n      <ol>\n        <li>\n          Divide the unsorted list into <em>n</em> sublists, each containing one\n          element(a list of one element is considered sorted)\n        </li>\n        <li>\n          Repeatedly merge sublists to produce new sorted sublists until there\n          is only one sublist remaining. This will be the sorted list.\n        </li>\n      </ol>\n    </div>\n  ),\n  worstCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  bestCase: (\n    <span>\n      O(<em>n</em> log <em>n</em>)\n    </span>\n  ),\n  space: (\n    <span>\n      O(<em>n</em>)\n    </span>\n  ),\n};\n","import { swap } from \"./helpers\";\n\nexport const quickSort = (barsArr) => {\n  let movingBars = [];\n  divider(movingBars, barsArr, 0, barsArr.length - 1);\n  return movingBars;\n};\n\nconst divider = (movingBars, barsIDsArr, start, end) => {\n  if (start < end) {\n    let pivot = partition(movingBars, barsIDsArr, start, end);\n    divider(movingBars, barsIDsArr, start, pivot - 1);\n    divider(movingBars, barsIDsArr, pivot + 1, end);\n  }\n};\n\nconst partition = (movingBars, barsArr, start, end) => {\n  let prevIdx = start - 1;\n  for (let index = start; index < end; index++) {\n    if (index !== end) {\n      movingBars.push([index, end, false]);\n    }\n    if (barsArr[index] < barsArr[end]) {\n      ++prevIdx;\n      swap(barsArr, index, prevIdx);\n      movingBars.push([index, prevIdx, true]);\n    }\n  }\n  swap(barsArr, prevIdx + 1, end);\n  movingBars.push([end, prevIdx + 1, true]);\n  return prevIdx + 1;\n};\n\nexport const QuickSortDesc = {\n  title: (\n    <a\n      href=\"https://en.wikipedia.org/wiki/Quicksort\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Quick Sort\n    </a>\n  ),\n  description: (\n    <div>\n      <p>\n        <b>Quick Sort </b>\n        is an efficient, in-place sorting algorith that in practice is faster\n        than MergeSort and HeapSort. However, it is not a stable sorting\n        algorithm, meaning that the relative positioning of equal sort items is\n        not preserved.Quicksort is a divide and conquer algorithm. Quicksort\n        first divides a large array into two smaller sub-arrays: the low\n        elements and the high elements. Quicksort can then recursively sort the\n        sub-arrays. The steps are:\n      </p>\n      <ol>\n        <li>\n          Pick an element, called a pivot, from the array. This is usually done\n          at random.\n        </li>\n        <li>Move pivot element to the start of the array.</li>\n        <li>\n          <em>Partitioning:</em> reorder the array so that all elements with\n          values less than the pivot come before the pivot, while all elements\n          with values greater than the pivot come after it (equal values can go\n          either way). After this partitioning, the pivot is in its final\n          position. This is called the <em>partition</em> operation.\n        </li>\n        <li>\n          Recursively apply the above steps to the sub-array of elements with\n          smaller values and separately to the sub-array of elements with\n          greater values.\n        </li>\n      </ol>\n      <p>\n        The base case of the recursion is an array of size zero or one, which\n        are sorted by definition.\n      </p>\n    </div>\n  ),\n  worstCase: (\n    <span>\n      O(<em>n</em>\n      <sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(<em>n</em>log<em>n</em>)\n    </span>\n  ),\n  bestCase: (\n    <span>\n      O(<em>n</em>log<em>n</em>)\n    </span>\n  ),\n  space: (\n    <span>\n      O(log<em>n</em>)\n    </span>\n  ),\n};\n","import { bubbleSort } from \"../algorithms/bubbleSort\";\nimport { insertionSort } from \"../algorithms/insertionSort\";\nimport { selectionSort } from \"../algorithms/selectionSort\";\nimport { heapSort } from \"../algorithms/heapSort\";\nimport { mergeSort } from \"../algorithms/mergeSort\";\nimport { quickSort } from \"../algorithms/quickSort\";\n\nexport const generateBarChart = (numOfBars) => {\n  let newBars = [];\n  let min = 5,\n    max = 100;\n  for (let i = 0; i < numOfBars; i++) {\n    const id = Date.now().toString() + i.toString();\n    const height = 4 * Math.floor(Math.random() * (max - min + 1) + min);\n    newBars.push({ id: parseInt(id), height: parseInt(height), type: 0 });\n  }\n  return newBars;\n};\n\nexport const sortDescBars = (barsArr) => {\n  barsArr.sort(function(a,b) {\n    return b.height - a.height\n  })\n}\n\nexport const swapBarsArr = (idx, bars) => {\n  let newbars = JSON.parse(JSON.stringify(bars));\n  let temp = newbars[idx[0]].height;\n  newbars[idx[0]].height = newbars[idx[1]].height;\n  newbars[idx[1]].height = temp;\n  return newbars;\n};\n\nexport const pause = async (speed) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, 450 / speed);\n  });\n};\n\nexport const generateMovingBars = (algoID, algoOptions, barsList) => {\n  const algoName = getAlgoName(algoID, algoOptions);\n  let movingBars = [];\n  if (algoName === \"Bubble Sort\") {\n    movingBars = bubbleSort(barsList);\n  }\n  if (algoName === \"Selection Sort\") {\n    movingBars = selectionSort(barsList);\n  }\n  if (algoName === \"Insertion Sort\") {\n    movingBars = insertionSort(barsList);\n  }\n  if (algoName === \"Merge Sort\") {\n    movingBars = mergeSort(barsList);\n  }\n  if (algoName === \"Quick Sort\") {\n    movingBars = quickSort(barsList);\n  }\n  if (algoName === \"Heap Sort\") {\n    movingBars = heapSort(barsList);\n  }\n  return movingBars;\n};\n\nexport const getAlgoName = (algoID, algoOptions) => {\n  return algoOptions.find((algo) => algo.id === algoID).type;\n};\n","import { createSlice } from '@reduxjs/toolkit'\nimport { generateBarChart, sortDescBars } from '../components/utils'\nexport const chartSlice = createSlice({\n    name: 'chart',\n    initialState: {\n        currentAlgo: 1,\n        speed: 1,\n        numOfBars: 5,\n        barsList: [],\n        movingBars: [],\n        isPaused: true,\n        optionChanged: false,\n        finished: false,\n        worstCase: false,\n        algoOptions: [\n            { id: 1, type: 'Bubble Sort' },\n            { id: 2, type: 'Selection Sort' },\n            { id: 3, type: 'Insertion Sort' },\n            { id: 4, type: 'Merge Sort' },\n            { id: 5, type: 'Quick Sort' },\n            { id: 6, type: 'Heap Sort' },\n        ],\n        numOfBarsOptions: [5, 10, 20, 30, 50, 70, 100],\n        speedOptions: [0.50, 0.75, 1.00, 2.00, 4.00],\n        barTypes: [{ NORMAL: 0 }, { CURRENT: 1 }, { SORTED: 2 }],\n        \n    },\n    reducers: {\n        createList: (state,action) => {\n            state.barsList = action.payload.barsList\n        },\n        saveMovingBars: (state, action) => {\n            state.movingBars = action.payload.movingBars\n        },\n        changeSpeed: (state, action) => {\n            state.speed = action.payload.speed;\n        },\n        changeAlgo : (state, action) => {\n            state.currentAlgo = action.payload.currentAlgo;\n        },\n        changePaused : (state, action) => {\n            state.isPaused = action.payload.isPaused\n        },\n        changeOption: (state, action) => {\n            state.optionChanged = action.payload.optionChanged\n            if (state.optionChanged === true) {\n                state.finished = false;\n                state.movingBars = [];\n            }\n        },\n        changeFinished: (state, action) => {\n            state.finished = action.payload.finished\n            if (state.finished === true) {\n                state.movingBars = []\n                state.worstCase = false;\n            }\n        },\n        changeWorstCase: (state, action) => {\n            state.worstCase = action.payload.worstCase\n        },\n        changeNumOfBars : (state, action) => {\n            state.numOfBars = action.payload.numOfBars;\n        },\n        swappingBars: (state, action) => {\n            const { barsInCheck, barsList } = action.payload\n            let newbars = JSON.parse(JSON.stringify(barsList));\n            let temp = newbars[barsInCheck[0]].height\n            newbars[barsInCheck[0]].height = newbars[barsInCheck[1]].height\n            newbars[barsInCheck[1]].height = temp;\n            state.barsList = newbars\n        },\n        changeBarColor: (state, action) => {\n            const { barIndexesToChange, barColor, barsList } = action.payload\n            let newbars = JSON.parse(JSON.stringify(barsList));\n            for (let i = 0; i < barIndexesToChange.length; i++) {\n                const barIndex = barIndexesToChange[i]\n                newbars[barIndex].type = barColor;\n            }\n            state.barsList = newbars\n        },\n        changeAllBarsColors: (state, action) => {\n            const { barsList, barColor } = action.payload\n            let newbars = JSON.parse(JSON.stringify(barsList));\n            for (let i = 0; i < state.numOfBars; i++) {\n                newbars[i].type = barColor;\n            }\n            state.barsList = newbars\n        },\n        changeBarHeight: (state, action) => {\n            const { barsList, barsRange } = action.payload;\n            let newbars = JSON.parse(JSON.stringify(barsList));\n            newbars[barsRange[0]].height = barsRange[1]\n            state.barsList = newbars\n        },\n    }\n})\n\n\nexport const { \n    createList,\n    saveMovingBars,\n    changeAlgo,\n    changeNumOfBars,\n    changeSpeed,\n    changePaused,\n    changeOption,\n    swappingBars,\n    changeBarColor,\n    changeAllBarsColors,\n    changeBarHeight,\n    changeFinished,\n    changeWorstCase\n} = chartSlice.actions\n\nexport const swappingBarsAsync =  (barsInCheck) => async function(dispatch, getState) {\n    const { barsList } = getState().chart\n    dispatch(swappingBars({ barsInCheck, barsList }))\n}\n\nexport const changeBarColorAsync =  (barIndexesToChange, barColor) => async (dispatch, getState) => {\n    const { barsList } = getState().chart\n    dispatch(changeBarColor({ barIndexesToChange, barColor, barsList }))\n}\n\nexport const changeAllBarColorAsync =   (barColor) => async (dispatch, getState) => {\n    const { barsList } = getState().chart\n    dispatch(changeAllBarsColors({ barsList, barColor }))\n}\n\nexport const changeBarHeightAsync = (barsRange) => async (dispatch, getState) => {\n    const { barsList } = getState().chart \n    dispatch(changeBarHeight({ barsList, barsRange }))\n}\n\nexport const resetChartAsync = () => async (dispatch, getState) => {\n    const { numOfBars } = getState().chart\n    dispatch(createList({ barsList: generateBarChart(numOfBars) }));\n    dispatch(changeOption({ optionChanged: true }));\n    dispatch(changePaused({ isPaused: true }));\n}\n\nexport const reverseChartAsync = () => async (dispatch, getState) => {\n    const { numOfBars } = getState().chart \n    let newbars = generateBarChart(numOfBars)\n    sortDescBars(newbars)\n    console.log(\"new desc bar\", newbars)\n    dispatch(createList({ barsList: newbars }));\n    dispatch(changeOption({ optionChanged: true }));\n    dispatch(changePaused({ isPaused: true }));\n} \nexport default chartSlice.reducer","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeAlgo, resetChartAsync } from \"../redux/chartSlice\";\n\nconst AlgoMenu = ({ currentAlgo, algoOptions }) => {\n  const dispatch = useDispatch();\n  const [buttonText, setButtonText] = useState(\"Algorithm\")\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-secondary dropdown-toggle\"\n        type=\"button\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n      >\n        {buttonText}\n      </button>\n      <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\n      <li><button className=\"dropdown-item disabled\" tabIndex=\"-1\" aria-disabled=\"true\">Algorithm</button></li>\n        {algoOptions\n          ? algoOptions.map((algo, idx) => (\n              <li key={idx}>\n                <button\n                  className=\"dropdown-item text-dark\"\n                  type=\"button\"\n                  key={algo.id} \n                  value={algo.type}\n                  onClick={(e) => {\n                          setButtonText(e.target.value)\n                          const algo = algoOptions.find((algo) => algo.type === e.target.value)\n                          if (currentAlgo !== algo.id) {                           \n                            dispatch(changeAlgo({ currentAlgo: algo.id }));\n                            dispatch(resetChartAsync());\n                          }\n                        }}\n                >\n                  {algo.type}\n                </button>\n              </li>\n            ))\n          : \"Loading menu\"}\n      </ul>\n    </div>\n  );\n};\n\nexport default AlgoMenu;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeSpeed, resetChartAsync } from \"../redux/chartSlice\";\n\nconst SpeedMenu = ({ speed, speedOptions }) => {\n  const dispatch = useDispatch();\n  const [buttonText, setButtonText] = useState(\"Speed\")\n  \n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-secondary dropdown-toggle\"\n        id=\"speedBtn\"\n        type=\"button\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n      >\n        {buttonText}\n      </button>\n      <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\n        <li><button className=\"dropdown-item disabled\" tabIndex=\"-1\" aria-disabled=\"true\">Speed</button></li>\n        {speedOptions\n          ? speedOptions.map((item, idx) => (\n              <li key={idx}>\n                <button\n                  className=\"dropdown-item text-dark\"\n                  type=\"button\"\n                  key={item}\n                  value={item}\n                  onClick={(e) => {\n                    setButtonText(e.target.value + \"x\")\n                    if (speed !== e.target.value) {\n                      dispatch(changeSpeed({ speed: e.target.value }));\n                      dispatch(resetChartAsync());\n                    }\n                  }}\n                >\n                  {item}x\n                </button>\n              </li>\n            ))\n          : \"Loading menu\"}\n      </ul>\n    </div>\n  );\n};\n\nexport default SpeedMenu;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeNumOfBars, resetChartAsync } from \"../redux/chartSlice\";\n\nconst NumOfBarsMenu = ({ numOfBars, numOfBarsOptions }) => {\n  const dispatch = useDispatch();\n  const [buttonText, setButtonText] = useState(\"Size\")\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-secondary dropdown-toggle\"\n        type=\"button\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n      >\n        {buttonText}\n      </button>\n      <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\n      <li><button className=\"dropdown-item disabled\" tabIndex=\"-1\" aria-disabled=\"true\">Size</button></li>\n        {numOfBarsOptions\n          ? numOfBarsOptions.map((item, idx) => (\n              <li key={idx}>\n                <button\n                  className=\"dropdown-item text-dark\"\n                  type=\"button\"\n                  key={item * 10}\n                  value={item}\n                  onClick={(e) => {\n                    setButtonText(e.target.value)\n                    if (numOfBars !== e.target.value) {\n                      dispatch(changeNumOfBars({ numOfBars: e.target.value }));\n                      dispatch(resetChartAsync());\n                    }\n                  }}\n                >\n                  {item}\n                </button>\n              </li>\n            ))\n          : \"Loading menu\"}\n      </ul>\n    </div>\n  );\n};\n\nexport default NumOfBarsMenu;\n","import React from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { resetChartAsync, changeWorstCase, reverseChartAsync } from \"../redux/chartSlice\";\n\nconst WorstCaseCheckBox = () => {\n    const dispatch = useDispatch();\n    \n    return (\n        <div className=\"form-check\">\n            <label className=\"form-check-label\" \n            htmlFor=\"flexCheckDefault\" \n            >\n            <input \n            className=\"form-check-input\" \n            type=\"checkbox\" value=\"\" \n            id=\"flexCheckDefault\" \n            \n            onChange={(e) => {\n                if (e.target.checked) {\n                    dispatch(changeWorstCase({ worstCase: true }))\n                    dispatch(reverseChartAsync())\n                } else {\n                    dispatch(changeWorstCase({ worstCase: false }))\n                    dispatch(resetChartAsync())\n                }\n            }}\n            />\n                Worst Case\n            </label>\n        </div>\n    )\n}\n\nexport default WorstCaseCheckBox\n","import React from \"react\";\n\nconst BarChart = ({ barsList }) => {\n  const getBarColor = (barType) => {\n    if (barType === 0) return \"bar\";\n    if (barType === 1) return \"bar current\";\n    if (barType === 2) return \"bar sorted\";\n  };\n  const showBarHeight = (thisIndex) => {\n    if (barsList.length === 5 || barsList.length === 10) {\n      const barHeight = barsList.filter((bar, index) => index === thisIndex)[0].height;\n      return barHeight/4;\n    }\n  };\n  return (\n    <div className=\"barsList\">\n      {barsList\n        ? barsList.map((bar, index) => (\n            <div\n              className={getBarColor(bar.type)}\n              key={index}\n              style={{ height: `${bar.height}px` }}\n              height={bar.height}\n              value={bar.height}\n            >\n              <span> {showBarHeight(index)} </span>\n            </div>\n          ))\n        : \"Loading bar chart\"}\n    </div>\n  );\n};\n\nexport default BarChart;\n","import React from \"react\";\nimport { QuickSortDesc } from \"./../algorithms/quickSort\";\nimport { BubbleSortDesc } from \"./../algorithms/bubbleSort\";\nimport { SelectionSortDesc } from \"./../algorithms/selectionSort\";\nimport { InsertionSortDesc } from \"./../algorithms/insertionSort\";\nimport { MergeSortDesc } from \"./../algorithms/mergeSort\";\nimport { HeapSortDesc } from \"./../algorithms/heapSort\";\n\nconst AlgoExplained = ({ algoName }) => {\n  let algoDesc;\n  if (algoName === \"Quick Sort\") algoDesc = QuickSortDesc;\n  if (algoName === \"Bubble Sort\") algoDesc = BubbleSortDesc;\n  if (algoName === \"Selection Sort\") algoDesc = SelectionSortDesc;\n  if (algoName === \"Insertion Sort\") algoDesc = InsertionSortDesc;\n  if (algoName === \"Merge Sort\") algoDesc = MergeSortDesc;\n  if (algoName === \"Heap Sort\") algoDesc = HeapSortDesc;\n\n  const { title, description, worstCase, avgCase, bestCase, space } = algoDesc;\n  return (\n    <div className=\"SortInfo\">\n      <hr />\n      <h1>{title ? title : \"Select Algorithm\"}</h1>\n\n      <div className=\"SortInfo__Body\">\n        <article className=\"SortInfo__Article\">\n          {description ? (\n            description\n          ) : (\n            <p>\n              You must select an algorithm before you can visualize it's\n              execution on an array of numbers.\n            </p>\n          )}\n        </article>\n\n        <aside className=\"SortInfo__Aside\">\n          <h3>Performance</h3>\n          <table className=\"performance\">\n            <tbody>\n              <tr>\n                <td>Worst-case time complexity </td>\n                <td>\n                  <code>{worstCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Average time complexity</td>\n                <td>\n                  <code>{avgCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Best-case time complexity</td>\n                <td>\n                  <code>{bestCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Worst-case space complexity </td>\n                <td>\n                  <code>{space}</code>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </aside>\n      </div>\n    </div>\n  );\n};\n\nexport default AlgoExplained;\n","export const selectBarsList = (state) => state.chart.barsList;\nexport const selectMovingBars = (state) => state.chart.movingBars;\nexport const selectCurrentAlgo = (state) => state.chart.currentAlgo;\nexport const selectAlgoOptions = (state) => state.chart.algoOptions;\nexport const selectColors = (state) => state.chart.barTypes;\nexport const selectPaused = (state) => state.chart.isPaused;\nexport const selectSpeedOptions = (state) => state.chart.speedOptions;\nexport const selectCurrentSpeed = (state) => state.chart.speed;\nexport const selectNumOfBars = (state) => state.chart.numOfBars;\nexport const selectNumOfBarsOptions = (state) =>\n  state.chart.numOfBarsOptions;\nexport const selectOptionChange = (state) => state.chart.optionChanged;\nexport const selectFinish = (state) => state.chart.finished;\n","import { combineReducers } from 'redux';\nimport chartSliceReducer from './chartSlice';\n\nconst rootReducer = combineReducers({\n    chart: chartSliceReducer,\n})\nexport default rootReducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from '.'\n\nconst store = configureStore ({\n    reducer: rootReducer\n})\n\n\n\nexport default store","import { pause } from \"./utils\";\nimport store from \"./../redux/store\";\nimport {\n  swappingBarsAsync,\n  changeBarColorAsync,\n  changeAllBarColorAsync,\n  changeBarHeightAsync,\n  saveMovingBars,\n  changePaused,\n  changeFinished,\n} from \"../redux/chartSlice\";\n\nconst getState = () => {\n  return store.getState().chart;\n};\n\nexport const swappingMovingBars = async (speed, newMovingBars) => {\n  console.log(\"newMovingBars in swapping\", newMovingBars)\n  while (newMovingBars.length > 0) {\n    let { isPaused, optionChanged } = getState();\n    if (isPaused && optionChanged === false) {\n      const currentStop = newMovingBars[0];\n      stopMoving([currentStop[0], currentStop[1]], newMovingBars);\n      break;\n    }\n    if (isPaused && optionChanged === true) {\n      store.dispatch(saveMovingBars({ movingBars: [] }));\n      break;\n    }\n\n    store.dispatch(changeAllBarColorAsync(getBarColor(\"NORMAL\")));\n    let barsAndStateInCheck = newMovingBars[0];\n    let barsInCheck = [barsAndStateInCheck[0], barsAndStateInCheck[1]];\n\n    store.dispatch(changeBarColorAsync(barsInCheck, getBarColor(\"CURRENT\")));\n    await pause(speed);\n\n    if (barsAndStateInCheck[2] === true) {\n      console.log(\"we are  swapping\");\n      store.dispatch(swappingBarsAsync(barsInCheck));\n      await pause(speed);\n    }\n\n    store.dispatch(changeBarColorAsync(barsInCheck, getBarColor(\"NORMAL\")));\n    await pause(speed);\n    newMovingBars.shift();\n  }\n  finishSorting(newMovingBars);\n};\n\nexport const animateBarsInRange = async (speed, newMovingBars) => {\n  console.log(\"animateBarsInRange\");\n  let prevRange = [];\n  while (newMovingBars.length > 0) {\n    let { isPaused, optionChanged } = getState();\n    if (isPaused && optionChanged === false) {\n      // const currentStop = newMovingBars[0][3]\n      stopMoving(prevRange, newMovingBars);\n      break;\n    }\n\n    store.dispatch(changeAllBarColorAsync(getBarColor(\"NORMAL\")));\n    if (prevRange !== newMovingBars[0][3]) {\n      store.dispatch(changeBarColorAsync(prevRange, getBarColor(\"NORMAL\")));\n      await pause(speed);\n\n      prevRange = newMovingBars[0][3];\n      store.dispatch(\n        changeBarColorAsync(newMovingBars[0][3], getBarColor(\"CURRENT\"))\n      );\n      await pause(speed);\n    }\n\n    let currRange = [newMovingBars[0][0], newMovingBars[0][1]];\n    store.dispatch(changeBarHeightAsync(currRange));\n    await pause(speed);\n    newMovingBars.shift();\n  }\n  finishSorting(newMovingBars);\n};\n\nconst stopMoving = (barsToChange, newMovingBars) => {\n  store.dispatch(changeBarColorAsync(barsToChange, getBarColor(\"CURRENT\")));\n  store.dispatch(saveMovingBars({ movingBars: newMovingBars }));\n};\n\nconst finishSorting = (newMovingBars) => {\n  if (newMovingBars.length === 0) {\n    if (!getState().finished) {\n      console.log(\"no more\");\n      store.dispatch(changeAllBarColorAsync(getBarColor(\"SORTED\")));\n      store.dispatch(changeFinished({ finished: true }));\n      store.dispatch(changePaused({ isPaused: true }));\n    }\n  }\n};\n\nconst getBarColor = (color) => {\n  const barColors = getState().barTypes;\n  if (color === \"CURRENT\") return barColors[1].CURRENT;\n  if (color === \"NORMAL\") return barColors[0].NORMAL;\n  if (color === \"SORTED\") return barColors[2].SORTED;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useCallback, useEffect } from \"react\";\nimport {changeFinished} from \"../../redux/chartSlice\";\nimport {\n  selectMovingBars,\n  selectCurrentAlgo,\n  selectAlgoOptions,\n  selectCurrentSpeed,\n  selectBarsList,selectPaused\n} from \"../../redux/selectors\";\nimport { changePaused, changeOption } from \"../../redux/chartSlice\";\nimport { generateMovingBars } from \"../utils\";\nimport { swappingMovingBars, animateBarsInRange } from \"../animations\";\n\nconst startSorting = async (\n  movingBars,\n  barsList,\n  currentAlgo,\n  algoOptions,\n  speed\n) => {\n  let newMovingBars;\n  if (movingBars.length > 0) {\n    newMovingBars = movingBars;\n  } else {\n    const barHeights = barsList.map((bar) => bar.height);\n    newMovingBars = generateMovingBars(currentAlgo, algoOptions, barHeights);\n  }\n\n  if (currentAlgo === 4) {\n    await animateBarsInRange(speed, newMovingBars);\n  } else {\n    await swappingMovingBars(speed, newMovingBars);\n  }\n};\n\nexport const usePlay = () => {\n  const dispatch = useDispatch();\n  const movingBars = useSelector(selectMovingBars);\n  const currentAlgo = useSelector(selectCurrentAlgo);\n  const algoOptions = useSelector(selectAlgoOptions);\n  const speed = useSelector(selectCurrentSpeed);\n  const barsList = useSelector(selectBarsList);\n  const isPaused = useSelector(selectPaused);\n  const handlePlayBtn = useCallback(() => {\n      dispatch(changeFinished({ finished: false }));\n      dispatch(changePaused({ isPaused: false }));\n      dispatch(changeOption({ optionChanged: false }));\n  }, [dispatch]);\n  \n  useEffect(() => {\n    if (!isPaused) {\n      const newBars = movingBars.slice()\n      startSorting(newBars, barsList, currentAlgo, algoOptions, speed);\n    }\n  },[isPaused])\n\n  return handlePlayBtn;\n};\n\nexport const usePause = () => {\n  const dispatch = useDispatch();\n  const handlePauseBtn = useCallback(() => {\n    dispatch(changePaused({ isPaused: true }));\n  }, [dispatch]);\n  \n  return handlePauseBtn;\n};","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AlgoMenu from \"./AlgoMenu\";\nimport SpeedMenu from \"./SpeedMenu\";\nimport NumOfBarsMenu from \"./NumOfBarsMenu\";\nimport WorstCaseCheckBox from \"./WorstCaseCheckBox\";\nimport BarChart from \"./BarChart\";\nimport AlgoExplained from \"./AlgoExplained\";\nimport { generateBarChart, getAlgoName } from \"./utils\";\nimport {\n  createList,\n} from \"../redux/chartSlice\";\nimport {\n  selectBarsList,\n  selectNumOfBars,\n  selectCurrentAlgo,\n  selectAlgoOptions,\n  selectFinish,\n  selectNumOfBarsOptions,\n  selectCurrentSpeed,\n  selectSpeedOptions,\n  selectPaused,\n} from \"../redux/selectors\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar } from \"@fortawesome/free-regular-svg-icons\";\nimport { faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { useRandomize } from './hooks/useRandomize';\nimport { usePlay, usePause } from './hooks/useControl';\n\nconst SortingVisualizer = () => {\n  const dispatch = useDispatch();\n  const numOfBars = useSelector(selectNumOfBars);\n  const numOptions = useSelector(selectNumOfBarsOptions);\n  const currentAlgo = useSelector(selectCurrentAlgo);\n  const algoOptions = useSelector(selectAlgoOptions);\n  const speed = useSelector(selectCurrentSpeed);\n  const speedOptions = useSelector(selectSpeedOptions);\n  const barsList = useSelector(selectBarsList);\n  const isFinished = useSelector(selectFinish);\n  const isPaused = useSelector(selectPaused);\n\n  useEffect(() => {\n    const newBars = generateBarChart(numOfBars);\n    dispatch(createList({ barsList: newBars }));\n  }, []);\n\n  const handleRandomizeBtn = useRandomize()\n  const handlePlayBtn = usePlay();\n  const handlePauseBtn = usePause()\n  return (\n    <div id=\"content\">\n      <nav\n        className=\"navbar navbar-expand-md navbar-dark py-3 sticky-top\"\n        id=\"navbar\"\n        style={{ backgroundColor: \"#6351ce\" }}\n      >\n        <a\n          className=\"navbar-brand mx-3\"\n          href=\"/\"\n          onClick={(e) => {\n            e.preventDefault();\n            window.scrollTo(0, 0);\n          }}\n        >\n          {\" \"}\n          <FontAwesomeIcon icon={faChartBar} size=\"1x\" />\n          <b style={{ padding: \"10px\" }}>Sorting Visualizer</b>\n        </a>\n        <button\n          className=\"navbar-toggler me-2\"\n          id=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarCollapse\"\n          aria-controls=\"navbarCollapse\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n          <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n            <li className=\"nav-item active m-2\">\n              <button\n                type=\"button\"\n                id=\"randomizeBtn\"\n                className=\"btn btn-outline-secondary\"\n                onClick={()=> {\n                  if (isPaused === true) handleRandomizeBtn()\n                }}\n              >\n                Randomize\n              </button>\n            </li>\n\n            <li className=\"nav-item m-2\">\n              <AlgoMenu \n              currentAlgo={currentAlgo} \n              algoOptions={algoOptions} />\n            </li>\n\n            <li className=\"nav-item m-2 \">\n              <NumOfBarsMenu\n                numOfBars={numOfBars}\n                numOfBarsOptions={numOptions}\n              />\n            </li>\n\n            <li className=\"nav-item m-2 \">\n              <SpeedMenu speed={speed} speedOptions={speedOptions} />\n            </li>\n\n            <li className=\"nav-item m-2\">\n              <button\n                type=\"button\"\n                id=\"startBtn\"\n                className=\"btn btn-secondary\"                \n                onClick={() => {\n                  if (isPaused === true) handlePlayBtn()\n                }}\n              >\n                {\" \"}\n                <FontAwesomeIcon icon={faPlay} size=\"lg\" />\n              </button>\n            </li>\n\n            <li className=\"nav-item m-2\">\n              <button\n                type=\"button\"\n                id=\"pauseBtn\"\n                className=\"btn btn-danger\"\n                onClick={() => {\n                  if (isFinished === false) handlePauseBtn()\n                }}\n              >\n                {\" \"}\n                <FontAwesomeIcon icon={faPause} size=\"lg\" />\n              </button>\n            </li>\n\n            <li className=\"nav-item m-2\">\n              <WorstCaseCheckBox />\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <BarChart barsList={barsList} />\n      <AlgoExplained algoName={getAlgoName(currentAlgo, algoOptions)} />\n    </div>\n  );\n};\n\nexport default SortingVisualizer;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useCallback, useEffect } from \"react\";\nimport {\n    selectNumOfBars,\n    selectMovingBars,\n    selectOptionChange,\n    selectFinish,\n} from \"../../redux/selectors\";\nimport {\n    createList,\n    changeFinished,\n  } from \"../../redux/chartSlice\";\nimport { generateBarChart } from \"../utils\";\n\n\nexport const useRandomize = () => {\n  const dispatch = useDispatch();\n  const numOfBars = useSelector(selectNumOfBars);\n  const movingBars = useSelector(selectMovingBars).slice();\n  const optionChanged = useSelector(selectOptionChange);\n  const isFinished = useSelector(selectFinish);\n\n  const handleRandomizeBtn = useCallback(() => {\n    if (optionChanged === false) {\n        if (isFinished === true) {\n          dispatch(changeFinished({ finished: false }));\n          dispatch(createList({ barsList: generateBarChart(numOfBars) }));\n        } else {\n          if (movingBars.length === 0) {\n            dispatch(createList({ barsList: generateBarChart(numOfBars) }));\n          }\n        }\n      }\n  }, [dispatch]);\n\n\n\n  return handleRandomizeBtn;\n};\n","import React from \"react\";\nimport { faGithub, faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nconst Footer = () => {\n  return (\n    <footer className=\"text-center mt-4 text-white position-absolute\">\n      <div className=\"container p-3 pb-2\">\n        <section>\n          <a\n            className=\"btn btn-outline-light btn-floating m-1\"\n            href=\"https://github.com/tttn13\"\n            role=\"button\"\n            target=\"_blank\" rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faGithub} />\n          </a>\n\n          <a\n            className=\"btn btn-outline-light btn-floating m-1\"\n            href=\"#!\"\n            role=\"button\"\n            target=\"_blank\" rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faUser} />\n          </a>\n\n          <a\n            className=\"btn btn-outline-light btn-floating m-1\"\n            href=\"https://www.linkedin.com/in/thi-nguyen-1310/\"\n            role=\"button\"\n            target=\"_blank\" rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faLinkedin} />\n          </a>\n        </section>\n      </div>\n      <div className=\"text-center p-3\">\n        &copy; {new Date().getFullYear()} Copyright: Thi Nguyen{\" \"}\n        <span style={{ color: \"#e25555\" }}>&#9829;</span>\n        <a\n          className=\"nav-link\"\n          style={{ fontWeight: \"600\" }}\n          href=\"https://github.com/tttn13/sorting-visualizer\"\n          target=\"_blank\" rel=\"noopener noreferrer\"\n        >\n          Source Code\n        </a>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import './App.css';\nimport SortingVisualizer from './components/SortingVisualizer'\nimport Footer from './components/Footer'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}